version: "3.9"

networks:
  appnet:

services:
  spring:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring
    restart: unless-stopped
    expose:
      - "8080"                 # 외부 미공개
    networks: [appnet]
    depends_on:
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy         # ← Redis 준비되면 기동
    environment:
      # Qdrant 내부 통신
      APP_QDRANT_BASE_URL: http://qdrant:6333
      # Redis (컨테이너 간 내부 호스트명 사용)
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_DATA_REDIS_PASSWORD: "1234"
      # (선택) 리포지토리 스캔 끄기
      SPRING_DATA_REDIS_REPOSITORIES_ENABLED: "false"

  fastapi:
    build:
      context: ./matcher
      dockerfile: Dockerfile
    container_name: fastapi
    restart: unless-stopped
    expose:
      - "8000"                 # 외부 미공개
    networks: [appnet]
    # FastAPI도 Redis 쓴다면 (주석 해제)
    # environment:
    #   REDIS_URL: "redis://:$(REDIS_PASSWORD)@redis:6379/0"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    expose:
      - "6333"                 # 외부 미공개
    volumes:
      - qdrant_data:/qdrant/storage
    networks: [appnet]

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: [ "redis-server","--appendonly","yes","--requirepass","1234" ]
    volumes:
      - redis_data:/data
    networks: [ appnet ]
    healthcheck:
      test: [ "CMD","redis-cli","-a","1234","ping" ]
      interval: 5s
      timeout: 3s
      retries: 30

  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks: [appnet]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - spring
      - fastapi
      - qdrant
      - redis

volumes:
  qdrant_data:
  caddy_data:
  caddy_config:
  redis_data:
